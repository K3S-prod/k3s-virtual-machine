// AUTOGENERATED FILE

#include "generated/inst_decoder.h"
#include "interpreter/interpreter.h"
#include "common/macro.h"

namespace k3s {

    size_t InstDecoder::DecodeAndResolve(const BytecodeInstruction &inst, const Interpreter &interp)
    {
        size_t opc_overload_prefix = INVALID_OVERLOAD_IDX;

        using Type = Register::Type;
        switch (inst.GetOpcode()) {
        <%- ISA.opcode_groups.each do |group_name, group| -%>
            // <%= group_name %>
            <%- group.each do |subgroup| -%>
                // <%= subgroup["signature"] %>
                <%- subgroup["opc"].each do |opcode| -%>
                case Opcode::<%= opcode.upcase %>:
                <%- end -%>
                {
                    <%- case subgroup["signature"] -%>
                    <%- when "opc_r4_r4" -%>
                    register_operands_idx_[0] = inst.GetOperands() & FIRST_NEAR_REG_MASK;
                    register_operands_idx_[1] = (inst.GetOperands() & SECOND_NEAR_REG_MASK) >> SECOND_NEAR_REG_SHIFT;
                    <%- when "opc_r8" -%>
                    register_operands_idx_[0] = inst.GetOperands() & FIRST_FAR_REG_MASK;
                    <%- when "opc_i8" -%>
                    immediate_operand_ = inst.GetOperands() & IMM_MASK;
                    <%- when "opc" -%>
                    <%- else -%>
                    <%- raise "Invalid signature" -%>
                    <%- end -%>
                    <%- subgroup["overloads"].each_with_index do |overload, overload_id| -%>
                        <%- inputs = overload["in"] -%>
                        <%- type_args = [] -%>
                        <%- reg_id_args = [] -%>
                        <%- with_acc = false -%>
                        <%- acc_pending_type = "" -%>
                        <%- inputs.each_with_index do |input, idx| -%>
                            <%- case input[0] -%>
                            <%- when "a" -%>
                                <%- with_acc = true -%>
                                <%- acc_pending_type = "Type::" + input[2..-1] -%>
                            <%- when "r" -%>
                                <%- type_args.append("Type::" + input[2..-1]) -%>
                                <%- reg_id_args.append("register_operands_idx_[%d]"%[idx]) -%>
                            <%- end  -%>
                        <%- end -%>
                        <%- if inputs.length > 0 then -%>
                            <%- if with_acc then -%>
                                <%- type_args.prepend(acc_pending_type) -%>
                    if (interp.CheckRegsTypeWithAcc<<%= type_args.join(', ') %>>( <%= reg_id_args.join(', ') %> )) {
                            <%- else -%>
                    if (interp.CheckRegsType<<%= type_args.join(', ') %>>( <%= reg_id_args.join(', ') %>))  {
                            <%- end -%>
                        opc_overload_prefix = <%= overload_id %>;
                        break;
                    }
                        <%- else -%>
                    opc_overload_prefix = <%= overload_id %>;    
                        <%- end -%>
                    <%- end -%>
                    break;
                }

            <%- end -%>
        <%- end -%>
        }
        if (opc_overload_prefix == INVALID_OVERLOAD_IDX) {
            LOG_FATAL(DECODER, "Can't resolve overload for " << inst);
        }
        
        ASSERT(opc_overload_prefix < (1U << MAX_OPC_OVERLOAD_SIZE_BITS));
        size_t dispatch_idx = (static_cast<size_t>(inst.GetOpcode()) << MAX_OPC_OVERLOAD_SIZE_BITS) | opc_overload_prefix;
        return dispatch_idx;
    }

    Opcode InstDecoder::Decode(const BytecodeInstruction &inst)
    {
        switch (inst.GetOpcode()) {
        <%- ISA.opcode_groups.each do |group_name, group| -%>
            // <%= group_name %>
            <%- group.each do |subgroup| -%>
                // <%= subgroup %>
                // <%= subgroup["signature"] %>
                <%- subgroup["opc"].each do |opcode| -%>
                case Opcode::<%= opcode.upcase %>:
                <%- end -%>
                {
                    <%- case subgroup["signature"] -%>
                    <%- when "opc_r4_r4" -%>
                    register_operands_idx_[0] = inst.GetOperands() & FIRST_NEAR_REG_MASK;
                    register_operands_idx_[1] = (inst.GetOperands() & SECOND_NEAR_REG_MASK) >> SECOND_NEAR_REG_SHIFT;
                    <%- when "opc_r8" -%>
                    register_operands_idx_[0] = inst.GetOperands() & FIRST_FAR_REG_MASK;
                    <%- when "opc_imm8" -%>
                    immediate_operands_ = inst.GetOperands() && IMM_MASK;
                    <%- end -%>
                    break;
                }
            <%- end -%>
        <%- end -%>
        }
        return inst.GetOpcode();
    }

}
