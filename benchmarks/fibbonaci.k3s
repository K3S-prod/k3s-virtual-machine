# fib(N:Num) -> Num - N-th Fibbonaci number

# primitive value:
.num ONE 1

# idx of element from sequence 0, 1, 1, 2, 3, 5, 8, 13, ...
.num N 9

.def Fib
{
    getarg0 r0          # r0 = N

    lda r0              # ACC = N   
    deca
    ble primitive        # if (N <= 1) goto primitive
    lda r0

    deca                # ACC--
    sta r1              # r1 = ACC(N-1)
    deca                # ACC--
    sta r2              # r2 = ACC(N-2) 
    ldai Fib            # ACC = fib:Fib
    
    setarg0 r1         # ACC(fib).args[0] = r1(N-1)
    call                # ACC()
    getret0 r1         # r1 = ACC.ret[0]

    setarg0 r2         # ACC(fib).args[0] = r2(N-2)
    call                # ACC()
    getret0 r2        # r2 = ACC.ret[0]

    add r1 r2          # ACC = r1 + r2
    sta r0              # r0 = ACC
    setret0 r0
    ret

primitive:
    ldai ONE
    sta r0
    setret0 r0
    ret
}

.def main
{
    ldai N
    deca 
    deca 
    sta r0              # r0 = N

    ldai Fib            # ACC = fib:Fib
    setarg0 r0          # ACC(fib).args[0] = r0 (N-1)
    call                # ACC()

    getret0 r3
    dump r3
    ret
}
