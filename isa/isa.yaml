###
#   %isa description%
#
###

reg_types:
    - typename: NUM
      desc:     Type to represent real and integer values.

    - typename: ARR
      desc:     Type to represent arrays of elements of any types.

    - typename: STR
      desc:     Type to represent strings.

    - typename: OBJ
      desc:     Type to represent objects with named fields. 
                Each field must have a type and object's layout can't be modified at runtime.
                Store reg to field of different type is a run-time error.

    - typename: FUNC
      desc:     Type to represent functions as objects.
                Registers of such type can be "invoked".
    
    - typename: NIL
      desc:     Empty/undefined value.
    
    - typename: ANY
      desc:     Unspecified type.

signatures:
  - opc_r4_r4
  - opc_r8
  - opc_i8
  - opc

opcodes:
    description:
        Each element of 'groups' should define signature, array of opcodes (mnemonics, related to the 'group') and array of overloads.
        Each overload should be annotated with pseudo-code and define requirements on inputs and guarantees for outputs.
      	Signature describes bit-representation of instructions.
      	Currently, all the opcodes are 8-bit wide and all valid instructions are 16-bit wide.
    opcode_overload_limit:
        4
    groups:
      Controlflow:
      - signature: opc_i8
        opc:
        - jump
        overloads:
        - in: []
          out: []
          semantics: pc <- pc + i8
      - signature: opc_i8
        opc:
        - ble
        - blt
        - bge
        - bne
        overloads:
        - in: ["a:NUM"]
          out: []
          semantics: >
            1. if (acc <= 0) { pc <- pc + i8 }
            2. if (acc < 0) { pc <- pc + i8 }
            3. if (acc >= 0) { pc <- pc + i8 }
            4. if (acc != 0) { pc <- pc + i8 }

      - signature: opc
        opc:
        - call
        overloads:
        - in: ["a:FUNC"]
          out: []
          semantics: acc.invoke()
      - signature: opc
        opc:
        - ret
        overloads:
        - in: []
          out: []
          semantics: return

      Objects:
      - signature: opc_r8
        opc:
        - getthis
        overloads:
        - in: []
          out: ["r:OBJ"]
          semantics: >
            r <- *this
      - signature: opc_r8
        opc:
        - stnull
        overloads:
        - in: []
          out: ["r:OBJ"]
          semantics: >
            r <- null_ref

      DataFlow:
      - signature: opc_i8
        opc:
        - ldai
        overloads:
        - in: []
          out: ["a:ANY"]
          semantics: > 
            acc <- allocobj(CONSTANT_POOL[imm8])
      - signature: opc_r8
        opc:
        - lda
        overloads:
        - in: ["r:ANY"]
          out: ["a:ANY"]
          semantics: acc <- reg
      - signature: opc_r8
        opc:
        - sta
        overloads:
        - in: ["a:ANY"]
          out: ["r:ANY"]
          semantics: reg <- acc
      - signature: opc_r4_r4
        opc:
        - mov
        overloads:
        - in: ["r:ANY"]
          out: ["r:ANY"]
          semantics: reg2 <- reg1

      Arithmetic (two-op):
      - signature: opc_r4_r4
        opc:
          - add
        overloads:
          - in: ["r:NUM", "r:NUM"]
            out: ["a:NUM"]
            semantics: acc <- r0 add r1;
          - in: ["r:STR", "r:STR"]
            out: ["a:STR"]
            semantics: a <- concat(r0, r1);

      - signature: opc_r4_r4
        opc:
        - sub
        - mul
        - div
        - mod
        overloads:
        - in: ["r:NUM", "r:NUM"]
          out: ["a:NUM"]
          semantics: acc <- r0 opc r1;
                         
      Arithmetic (single-op):
      - signature: opc_r8
        opc:
        - add2
        overloads:
        - in:   ["a:NUM", "r:NUM"]
          out:  ["a:NUM"]
          semantics: acc <- acc opc r0
        - in:   ["a:STR", "r:STR"]
          out:  ["a:STR"]
          semantics: acc <- concat(acc, r0)
        - in:   ["a:ARR", "r:NUM"]
          out:  ["a:ARR"]
          semantics: foreach idx { acc[idx] <- acc[idx] opc ri }
      - signature: opc_r8
        opc:
        - sub2
        - div2
        - mul2
        overloads:
        - in:   ["a:NUM", "r:NUM"]
          out:  ["a:NUM"]
          semantics: acc <- acc opc r0
        - in:   ["a:ARR", "r:NUM"]
          out:  ["a:ARR"]
          semantics: foreach idx { acc[idx] <- acc[idx] opc ri }

      Arithmetic (zero-op):
      - signature: opc
        opc:
        - deca
        overloads:
        - in:   ["a:NUM"]
          out:  ["a:NUM"]
          semantics: acc--

      Array-specific:
      - signature: opc_r8
        opc:
        - newarr
        overloads:
        - in: ["r:NUM"]
          out: ["a:ARR"]
          semantics: > 
            acc <- allocate_array_with_size(ri)

      - signature: opc_r4_r4
        opc:
        - setelem
        overloads:
        - in: ["a:ANY", "r:ARR", "r:NUM"]
          out: []
          semantics: >
                 acc[r1] = r2;
                 acc <- acc;
        - in: ["a:ANY", "r:OBJ", "r:STR"]
          out: []
          semantics: >
                 r1[r2] = acc;

      - signature: opc_r4_r4
        opc:
        - getelem
        overloads:
        - in: ["r:ARR", "r:NUM"]
          out: ["a:ANY"]
          semantics: >
            acc <- r1[r2];
        - in: ["r:OBJ", "r:STR"]
          out: ["a:ANY"]
          semantics: >
            acc <- r1[r2];
            if (acc.kind_of? Function) { acc.SetThis(r1) }

      Dump:
      - signature: opc_r8
        opc:
        - dump
        overloads:
        - in: ["r:ANY"]
          out: []
          semantics: r1.dump()
      - signature: opc
        opc:
        - dumpa
        overloads:
        - in: ["a:ANY"]
          out: []
          semantics: acc.dump()

      Function-specific:
      - signature: opc_r8
        opc:
        - getarg0
        - getarg1
        overloads:
        - in: []
          out: ["r:ANY"]
          semantics: >
            reg <- (*this).GetArg<0>();
      - signature: opc_r8
        opc:
        - setret0
        overloads:
        - in: ["r:ANY"]
          out: []
          semantics: >
            (*this).SetRet<0>(reg);
      - signature: opc_r8
        opc:
        - setarg0
        - setarg1
        overloads:
        - in: ["a:FUNC", "r:ANY"]
          out: []
          semantics: > 
            1. acc.GetAsFunction().SetArg<i>(reg)
      - signature: opc_r8
        opc:
        - getret0
        overloads:
        - in: ["a:FUNC"]
          out: ["r:ANY"]
          semantics: > 
            reg <- acc.GetAsFunction().GetRet<0>()
