%{
    #include "interpreter/generated/opcodes.h"
    #include <cstdlib>
    #include <cstdio>
    #include <cassert>
    #include "grammar.l.hpp"

    size_t ASM_LINE_NO = 1;
    extern "C" int yylex(void);
    void UnknownTokenHandle() {
        printf("(line_no:%lu): Unknown token: %s\n", ASM_LINE_NO, yytext);
        exit (-1);
    }
%}

doubl [0-9]+(\\.[0-9]+)? 

integ [+-]?[0-9]+

%%
[#].+$          {}
[#]$            {}
[\n]            { ASM_LINE_NO ++; }

".def"          { return FUNCTION_KEYW; }
".obj"          { return OBJ_KEYW; }
".num"          { return NUM_KEYW; }
".str"          { return STR_KEYW; }

[{]             { return B_BEGIN; }
[:]             { return COLON; }
[}]             { return B_END; }

{doubl}         { return NUM; }
["].*["]        { return STR_LITERAL; }

[ ]+            {}
{integ}         {
                    yylval = atoi(yytext);
                    //printf("int(%d)\n", yylval);
                    return IMM_LITERAL;
                }
[r]{integ}      {
                    yylval = atoi(++yytext);
                    //printf("reg(%d)\n", yylval);
                    return REG;
                }

<%- ISA.opcode_groups.each do |group_name, group| -%>
    <%- group.each do |sub_group| -%>
        <%- sub_group["opc"].each do |opcode| -%>
            <%- opcode.chars do |char| -%>
<%= "[" + char + "]" -%>
            <%- end -%>
<%=- " {" %>
    yylval = static_cast<int>(k3s::Opcode::<%= opcode.upcase -%>);
    return(<%= sub_group["signature"].upcase -%>);
<%=- "}" %>
        <%- end -%>
    <%- end -%>
<%- end -%>

[E][O][F] {
    yylval = 0;
    printf("EOF(%d)\n", yylval);
    return EOF;
}

[a-zA-Z_][a-zA-Z0-9_]*  { return IDENTIFIER; }

. {
    UnknownTokenHandle();
}

%%
